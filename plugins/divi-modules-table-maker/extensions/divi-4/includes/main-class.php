<?php

if (! defined('ABSPATH')) exit;

/**
 * Divi-Modules – Table Maker.
 *
 * @since  3.1.0
 *
 */
class DVMD_Table_Maker extends DiviExtension {


    /**
     * The gettext domain for the extension's translations.
     *
     * @since   2.0.0
     * @access  public
     *
     * @var     string
     */
    public $gettext_domain = 'dvmd-table-maker';


    /**
     * The extension's WP Plugin name.
     *
     * @since   2.0.0
     * @access  public
     *
     * @var     string
     */
    public $name = 'divi-modules-table-maker';


    /**
     * The extension's version
     *
     * @since   3.0.0
     * @access  public
     *
     * @var     string
     */
    public $version;


    /**
     * DVMD_Table_Maker constructor.
     *
     * @since   3.1.0
     * @access  public
     *
     * @param   string  $name
     * @param   array   $args
     *
     * @return  void
     */
    public function __construct($name = 'divi-modules-table-maker', $args = array()) {

        // Properties.
        $this->version = DVMD_TM_PLUGIN_VERSION;
        $this->plugin_dir = plugin_dir_path(__FILE__);
        $this->plugin_dir_url = plugin_dir_url($this->plugin_dir);

        // Filters.
        // add_filter('et_pb_set_style_selector', array(__CLASS__, 'dvmd_tm_set_style_selector'), 10, 2);
        add_filter('et_builder_global_modules_ignore_autop', array(__CLASS__, 'dvmd_tm_ignore_global_autop'));
        add_filter('the_content', array(__CLASS__, 'dvmd_tm_escape_newline'), 9);
        add_filter('the_content', array(__CLASS__, 'dvmd_tm_unescape_newline'));
        add_filter('et_pb_all_fields_unprocessed_dvmd_table_maker_item', array(__CLASS__, 'dvmd_tm_filter_item_fields'));

        // Construct.
        parent::__construct($name, $args);
    }


    // /**
    //  * Filter the generated module selector
    //  *
    //  * @since   3.0.0
    //  * @access  public
    //  *
    //  * @param  string  $selector  Generated selector.
    //  * @param  string  $module    Module name.
    //  *
    //  * @filter  et_pb_set_style_selector
    //  * @return  string  Custom selector.
    //  */
    // public static function dvmd_tm_set_style_selector($selector, $module) {
    //     if (strpos($module, 'dvmd_table_maker') === false) return $selector;
    //     return str_replace('.et-db #et-boc .et-l ', '', $selector);
    // }


    /**
     * Adds Table Maker to the list of modules which...
     * don't need to apply autop to the global module content.
     *
     * @since   3.0.0
     * @access  public
     *
     * @param   array  $modules  Module slugs list.
     *
     * @filter  et_builder_global_modules_ignore_autop
     * @return  string
     */
    public static function dvmd_tm_ignore_global_autop($modules) {
        return array_push($modules, 'dvmd_table_maker', 'dvmd_table_maker_item');
    }


    /**
     * Checks whether is single post, is on frontend (ie. not Visual Builder)…
     * and the post content is generated by Divi Builder.
     *
     * @since   2.0.1
     * @access  private
     *
     * @return  boolean
     */
    private static function dvmd_tm_should_escape_newline() {
        return
            is_singular() &&
            !et_core_is_fb_enabled() &&
            'on' === get_post_meta(get_the_ID(), '_et_pb_use_builder', true);
    }


    /**
     * Escape newline from content by converting \n into {{dvmd_newline}}.
     * Default wpautop priority is 10, we use 9 to execute this before wpautop.
     *
     * @since   2.0.1
     * @access  public
     *
     * @param   string  $content
     *
     * @filter  the_content
     * @return  string
     */
    public static function dvmd_tm_escape_newline($content) {
        if (self::dvmd_tm_should_escape_newline()) {
            return preg_replace_callback(
                "/\[dvmd_table_maker_item[^]]*]/",
                array(__CLASS__, 'dvmd_tm_newline_to_placeholder'),
                $content
            );
        }
        return $content;
    }


    /**
     * Callback function to convert \n into {{dvmd_newline}}.
     *
     * @since   2.0.1
     * @access  private
     *
     * @param   array  $matches
     *
     * @return  string
     */
    private static function dvmd_tm_newline_to_placeholder($matches) {
        $old_match = et_()->array_get($matches, '0', '');
        $new_match = preg_replace("/\n/", "{{dvmd_newline}}", $old_match);
        return $new_match;
    }


    /**
     * Restore newline to content by converting {{dvmd_newline}} into \n.
     * Default wpautop priority is 10, we use 10 to execute this soon after wpautop.
     *
     * @since   2.0.1
     * @access  public
     *
     * @param   string  $content
     *
     * @filter  the_content
     * @return  string
     */
    public static function dvmd_tm_unescape_newline($content) {
        if (self::dvmd_tm_should_escape_newline()) {
            return preg_replace_callback(
                "/\[dvmd_table_maker_item[^]]*]/",
                array(__CLASS__, 'dvmd_tm_placeholder_to_newline'),
                $content
            );
            return $content;
        }
        return $content;
    }


    /**
     * Callback function to convert {{dvmd_newline}} into \n.
     * Firstly, removes additional newlines created by wpautop for…
     * nested html elements (eg. <cell><h1>Hello World</h1><cell>).
     *
     * @since   2.0.1
     * @access  public
     *
     * @param   array  $matches
     *
     * @return  string
     */
    private static function dvmd_tm_placeholder_to_newline($matches) {
        $old_match = et_()->array_get($matches, '0', '');
        $new_match = preg_replace("/\n<p>|<\/p>\n|\n/", "", $old_match);
        $new_match = preg_replace("/{{dvmd_newline}}/", "\n", $new_match);
        return $new_match;
    }


    /**
     * Callback function to filter child item fields.
     *
     * @since   3.0.0
     * @access  public
     *
     * @param   array  $fields  All unprocessed fields.
     *
     * @filter  et_pb_all_fields_unprocessed_dvmd_table_maker_item
     * @return  array
     */
    public static function dvmd_tm_filter_item_fields($fields) {
        $fields['hover_transition_duration']    = false;
        $fields['hover_transition_delay']       = false;
        $fields['hover_transition_delay']       = false;
        $fields['hover_transition_speed_curve'] = false;
        $fields['overflow-x']                   = false;
        $fields['overflow-y']                   = false;
        return $fields;
    }
}

new DVMD_Table_Maker;
